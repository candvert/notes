Linux network programming(api)

socket, bind, connect, accept, listen, shutdown, getsockname, getpeername
#include <sys/types.h>
#include <sys/socket.h>
int socket(int domain, int type, int protocol);
int bind(int sockfd, const struct sockaddr *addr, socklen_t addrlen);
int connect(int sockfd, const struct sockaddr *addr, socklen_t addrlen);
int accept(int sockfd, struct sockaddr *addr, socklen_t *addrlen);
int listen(int sockfd, int backlog);

htonl, htons, ntohl, ntohs, inet_ptonï¼Œinet_ntop
#include <arpa/inet.h>
uint32_t htonl(uint32_t hostlong);
uint16_t htons(uint16_t hostshort);
uint32_t ntohl(uint32_t netlong);
uint16_t ntohs(uint16_t netshort);
int inet_pton(int af, const char *src, void *dst); (af : AF_INET, AF_INET6);
const char *inet_ntop(int af, const void *src, char *dst, socklen_t size);

select
#include <sys/select.h>
int select(int nfds, fd_set *readfds, fd_set *writefds, fd_set *exceptfds, struct timeval *timeout);

poll
#include <poll.h>
int poll(struct pollfd *fds, nfds_t nfds, int timeout);

epoll
#include <sys/epoll.h>
int epoll_create(int size);
int epoll_ctl(int epfd, int op, int fd, struct epoll_event *event);  (op : EPOLL_CTL_ADD, EPOLL_CTL_MOD, EPOLL_CTL_DEL)
typedef union epoll_data {
	void 	*ptr;
	int 	fd;
	uint32_t	u32;
	uint64_t 	u64;
} epoll_data_t;
struct epoll_event {
	uint32_t 		events;
	epoll_data_t	data;
}
(events : EPOLLIN, EPOLLOUT, EPOLLRDHUP, EPOLLPRI, EPOLLERR, EPOLLHUP, EPOLLET, EPOLLONESHOT)
int epoll_wait(int epfd, struct epoll_event *events, int maxevents, int timeout);

close, write, read
#include <unistd.h>
int close(int fd);
ssize_t write(int fd, const void *buf, size_t count);
ssize_t read(int fd, void *buf, size_t count);

sprintf, snprintf, sscanf, fgets, fprintf

bzero, bcopy, bcmp

memset, memcopy

strcat, substr

getenv

fork

execl, execlp, execle, execv, execvp, execvpe
The differences in the six exec functions are: (a) whether the program file to execute is specified by a filename or a pathname; (b) whether the arguments to the new program are listed one by one or referenced through an array of pointers; and (c) whether the environment of the calling process is passed to the new program or whether a new environment is specified.
These functions return to the caller only if an error occurs. Otherwise, control passes to the start of the new program, normally the main function.
Normally, only execve is a system call within the kernel and the other five are library functions that call execve.


wait, waitpid

exit

fgetc, fgets, getc, getchar, ungetc

fputc, fputs, putc, putchar, puts

lseek

fileno

gethostbyname

pthread_create, 

perror

getopt

setsockopt

socketpair

getopt

getcwd

calloc

sem_init